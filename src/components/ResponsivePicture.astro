---
import { Picture } from "astro:assets";
import type { ImageMetadata } from "astro";

interface Props {
	src: ImageMetadata | null;
	alt: string;
	class?: string;
	widths?: number[];
	sizes?: string;
	formats?: string[];
	media?: { [key: string]: string }; // New prop for media queries
}

// Default widths include very large sizes for high-DPI and large displays
const defaultWidths = [480, 720, 960, 1440, 2000, 2880, 3840];
// Default sizes: 100vw for full-width, override as needed
const defaultSizes = "100vw";
const defaultFormats = ["avif", "webp"];

const { src, alt, class: className, widths = defaultWidths, sizes = defaultSizes, formats = defaultFormats, media } = Astro.props;

// Helper function to safely generate srcset
const generateSrcSet = (src: string, format: string, widths: number[]) => {
	return widths.map((width) => `${src.replace(/\.[^/.]+$/, `.${format}`)} ${width}w`).join(", ");
};
---

{
	src ? (
		<picture>
			{/* Add media-specific sources */}
			{media && Object.entries(media).map(([mediaQuery, srcSet]) => <source media={mediaQuery} srcset={srcSet} sizes={sizes} />)}

			{/* Default formats */}
			{formats.map((format) => (
				<source srcset={generateSrcSet(src.src, format, widths)} type={`image/${format}`} sizes={sizes} />
			))}

			{/* Fallback image */}
			<img
				src={src.src}
				srcset={widths.map((width) => `${src.src} ${width}w`).join(", ")}
				alt={alt}
				class={className}
				loading="lazy"
				decoding="async"
			/>
		</picture>
	) : (
		<p>Image not found: {alt || "No description available"}</p>
	)
}
